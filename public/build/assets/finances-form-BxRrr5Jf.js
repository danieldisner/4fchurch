import{e as i,g as B}from"./formatting-Djhzecxh.js";document.addEventListener("DOMContentLoaded",function(){const d=async()=>{try{const e=document.getElementById("date_transfer").value,t=await(await fetch(`/finances/data?date=${e}`)).json();h(t.entradas,t.saidas,t.permissions)}catch(e){console.error("Error fetching data:",e),showMessage(e.message,"error")}},b=e=>e.edit?'<button class="edit-button">E</button>':"",g=e=>e.delete?'<button class="remove-button">-</button>':"",h=(e,n,t)=>{const r=document.querySelector("#entradas-table tbody"),a=document.querySelector("#saidas-table tbody"),s=document.querySelector("#total-entradas"),y=document.querySelector("#total-saidas"),m=document.querySelector("#saldo-total");r.innerHTML="",a.innerHTML="";let c=0,p=0;const f=(o,x,l)=>{const S=parseFloat(o.value);b(l);const w=g(l),v=l.edit?"":"readonly",T=l.edit?"":"disabled";return`
                <tr data-id="${o.id}" data-transaction-type="${x}" class="hover:bg-gray-100">
                    <td class="hidden">${o.id}</td>
                    <td class="px-1 py-2 text-sm text-gray-900 table-cell">${w}</td>
                    <td class="px-2 py-2 text-sm text-gray-900 table-cell transaction-title"><input type="text" value="${o.title}" class="editable table-input text-input" ${v} /></td>
                    <td class="px-2 py-2 text-sm text-gray-900 table-cell transaction-date">${B(o.date_transfer)}</td>
                    <td class="px-2 py-2 text-sm text-gray-900 table-cell transaction-source">
                        <select class="editable table-input select-input" ${T}>
                            <option value="Banco" ${o.source==="Banco"?"selected":""}>Banco</option>
                            <option value="Caixa" ${o.source==="Caixa"?"selected":""}>Caixa</option>
                        </select>
                    </td>
                    <td class="px-2 py-2 text-sm text-gray-900 table-cell transaction-value"><input type="text" value="${i(S)}" class="editable table-input number-input" ${v} /></td>
                    <td class="hidden transaction-description">${o.description}</td>
                </tr>
            `};e.forEach(o=>{r.insertAdjacentHTML("beforeend",f(o,"Entrada",t)),c+=parseFloat(o.value)}),n.forEach(o=>{a.insertAdjacentHTML("beforeend",f(o,"Saída",t)),p+=parseFloat(o.value)}),s.textContent=i(c),y.textContent=i(p),m.textContent=i(c-p)},E=e=>{var n,t,r,a,s;return{id:e.dataset.id,transaction_type:e.dataset.transactionType,title:((n=e.querySelector(".transaction-title input"))==null?void 0:n.value)||"",date_transfer:((t=e.querySelector(".transaction-date"))==null?void 0:t.textContent.split("/").reverse().join("-"))||"",source:((r=e.querySelector(".transaction-source select"))==null?void 0:r.value)||"",value:((a=e.querySelector(".transaction-value input"))==null?void 0:a.value.replace(".","").replace(",","."))||"",description:((s=e.querySelector(".transaction-description"))==null?void 0:s.textContent)||""}};d();const u=document.getElementById("finance-form");u&&u.addEventListener("submit",async function(e){e.preventDefault();const n=document.getElementById("transaction_type").value,t=document.getElementById("title").value,r=document.getElementById("source").value,a=document.getElementById("date_transfer").value,s=parseFloat(document.getElementById("value").value.replace(",",".")).toFixed(2),y=document.getElementById("description").value;if(isNaN(s)){showMessage("Por favor, insira um valor válido.","error");return}const m={transaction_type:n,title:t,source:r,date_transfer:a,value:s,description:y};try{if(!(await fetch("/finances/add",{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":document.querySelector('meta[name="csrf-token"]').getAttribute("content")},body:JSON.stringify(m)})).ok)throw new Error("Erro ao enviar os dados");u.reset(),document.getElementById("date_transfer").value=a,d(),showMessage("Dados enviados com sucesso","success")}catch(c){console.error("Erro ao enviar os dados:",c),showMessage(c.message,"error")}}),document.getElementById("date_transfer").addEventListener("change",d),document.querySelectorAll("#entradas-table tbody, #saidas-table tbody").forEach(e=>{e.addEventListener("change",async n=>{const t=n.target.closest("input, select");if(!t)return;const r=t.closest("tr");if(!r){console.error("Row not found for cell:",t),showMessage("Linha não encontrada para a célula.","error");return}const a=E(r);if(!a.id){console.error("Row ID not found:",a),showMessage("ID da linha não encontrado.","error");return}try{if(!(await fetch(`/finances/${a.id}/update`,{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":document.querySelector('meta[name="csrf-token"]').getAttribute("content")},body:JSON.stringify(a)})).ok)throw new Error("Erro ao enviar os dados");d(),showMessage("Dados atualizados com sucesso","success")}catch(s){console.error("Erro ao enviar os dados:",s),showMessage(s.message,"error")}})}),document.querySelectorAll("#entradas-table tbody, #saidas-table tbody").forEach(e=>{e.addEventListener("click",async n=>{if(n.target.matches(".remove-button")){const t=n.target.closest("tr"),r=t.dataset.id;try{if(!(await fetch(`/finances/${r}/delete`,{method:"DELETE",headers:{"X-CSRF-TOKEN":document.querySelector('meta[name="csrf-token"]').getAttribute("content")}})).ok)throw new Error("Erro ao remover o dado");t.remove(),d(),showMessage("Dado removido com sucesso","success")}catch(a){console.error("Erro ao remover o dado:",a),showMessage(a.message,"error")}}})})});
